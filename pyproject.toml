[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opsbox"
version = "0.1.0"
description = "A comprehensive Python library for server operations including backup scripts, encrypted mail functionality, and utility tools"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
authors = [
    {name = "OpsBox Team", email = "opsbox@example.com"},
]
keywords = ["server", "operations", "backup", "encryption", "mail", "utilities"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "pre-commit>=3.3.0",
    "commitizen>=3.13.0",
    "types-setuptools",
]



[project.urls]
Homepage = "https://github.com/yourusername/opsbox"
Repository = "https://github.com/yourusername/opsbox"
Documentation = "https://opsbox.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/opsbox/issues"

[project.scripts]
opsbox = "opsbox.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/opsbox"]

# Ruff configuration
[tool.ruff]
select = ["ALL"]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "E501",  # Line too long (handled by formatter)
    "ANN101", # Missing-type-self
    "ANN102", # Missing-type-cls
    "S101",   # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "EXE001", # Shebang is present but file is not executable
    "T201",   # print found
    "D401",   # First line of docstring should be in imperative mood
    "UP007",  # Use X | Y for type annotations
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "RET504", # Unnecessary assignment before return statement
    "EM101",  # Exception must not use a string literal, assign to variable first
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "F841",   # Local variable is assigned to but never used
    "S108",   # Probable insecure usage of temporary file or directory
    "PGH003", # Use specific rule codes when ignoring type issues
]
line-length = 88
target-version = "py312"
src = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "PLR0913"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.opsbox.utils.common"
warn_unreachable = false

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used for tests

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["*_test.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/opsbox",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
